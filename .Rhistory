regions)
st_crs(regions)
st_crs(huts_clean)
st_crs(regions)
# Write code using the st_join function to join in the information on
# the regions dataset to the huts_clean dataset.
huts_enrich =
st_join(huts_clean,
regions |> st_transform("EPSG:3035"))
library(terra)
tmax = rast("https://github.com/loreabad6/app-dev-gis/raw/refs/heads/main/data/AUT_wc2.1_30s_tmax.tif")
tmax
# you don't need to change anything here!
names(tmax) = month.abb
# you don't need to change anything here!
names(tmax)
tmax_mean = mean(tmax[[c("Dec","Jan","Feb","Mar")]]) # add the winter months to subset.
tmax_mean
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(huts_enrich)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = tmax_mean |> terra::extract(huts_enrich)
terra::st_crs(tmax_mean)
st_crs(tmax_mean)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = tmax_mean |> st_transform("EPSG:3035")
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = tmax_mean_huts |> terra:project("EPSG:3035")
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = tmax_mean_huts |> terra::extract(huts_enrich)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean_huts,huts_enrich)
View(tmax_mean_huts)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean,huts_enrich)
st_crs(tmax_mean)
st_crs(huts_enrich)
View(tmax_mean_huts)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean,
huts_enrich |> st_transform("EPSG:41001")) #WGS84
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean,
huts_enrich)
library(sf)
huts = read_sf("https://github.com/loreabad6/app-dev-gis/raw/refs/heads/main/data/p5_huts.gpkg")
huts_clean_1 = huts |>
select(c("name", "ele", "capacity", "beds", "amenity", "cuisine", "operator")) |>
mutate(
ele = as.numeric(ele),
capacity = as.numeric(capacity),
beds = as.numeric(beds)
) |>
mutate(
capacity_overall = case_when(is.na(capacity) ~ beds, TRUE ~ capacity)) |>
st_transform("EPSG:3035")
c((dim(huts_clean)/dim(huts))*100)[[2]]
c((dim(huts_clean_1)/dim(huts))*100)[[2]]
regions = read_sf("https://github.com/loreabad6/app-dev-gis/raw/refs/heads/main/data/p5_regions.gpkg")
st_crs(regions)
# Write code using the st_join function to join in the information on
# the regions dataset to the huts_clean dataset.
huts_enrich = huts_clean |>
st_join(
regions |> st_transform("EPSG:3035")
)
library(terra)
tmax = rast("https://github.com/loreabad6/app-dev-gis/raw/refs/heads/main/data/AUT_wc2.1_30s_tmax.tif")
tmax
names(tmax) = month.abb
tmax_mean = mean(tmax[[c("Dec","Jan","Feb","Mar")]]) # add the winter months to subset.
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean,
huts_enrich)
# Write code using the st_join function to join in the information on
# the regions dataset to the huts_clean dataset.
huts_enrich = huts_clean_1 |>
st_join(
regions |> st_transform("EPSG:3035")
)
# We need to add the `terra::` in front of the function
# because of a bug with terra
# The first argument is the raster object and
# the second one can be an sf object.
# You can include the huts_enrich object here.
tmax_mean_huts = terra::extract(tmax_mean,
huts_enrich)
View(tmax_mean_huts)
View(huts_enrich)
# add the winter mean tmax here, note that it is the second column in the data
huts_enrich = huts_enrich |>
mutate(tmax_winter = tmax_mean_huts$mean)
# Write code to verify that the tmax_winter column in
# the huts_enrich dataset ranges between -10.15 and 4.20
glimpse(huts_enrich$tmax_winter)
# Write code to verify that the tmax_winter column in
# the huts_enrich dataset ranges between -10.15 and 4.20
statistic(huts_enrich$tmax_winter)
# Write code to verify that the tmax_winter column in
# the huts_enrich dataset ranges between -10.15 and 4.20
describe(huts_enrich$tmax_winter)
# Write code to verify that the tmax_winter column in
# the huts_enrich dataset ranges between -10.15 and 4.20
min(huts_enrich$tmax_winter)
# Write code to verify that the tmax_winter column in
# the huts_enrich dataset ranges between -10.15 and 4.20
min(huts_enrich$tmax_winter)
max(huts_enrich$tmax_winter)
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country= 'Austria',
10>capacity_overall<50,
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country= 'Austria',
capacity>10 & capacity_overall<50,
amenity ='restaurant',
cuisine ='regional',
str_detect(operator,'OAV')
)
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country= 'Austria',
capacity>10 & capacity_overall<50,
amenity =='restaurant',
cuisine =='regional',
str_detect(operator,'OAV')
)
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country== 'Austria',
capacity>10 & capacity_overall<50,
amenity =='restaurant',
cuisine =='regional',
str_detect(operator,'OAV')
)
mapview(result)
View(result)
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country== 'Austria',
capacity>10 & capacity_overall<50,
amenity =='restaurant',
cuisine =='regional',
#str_detect(operator,'OAV')
)
View(result)
View(result)
result = huts_enrich |>
filter(ele >= 800,
tmax_winter <= 0,
country== 'Austria',
capacity>10 & capacity_overall<50,
amenity =='restaurant',
cuisine =='regional',
str_detect(operator,'Ã–AV')
)
View(result)
mapview(result)
print(result$name)
tm_shape(World) +
tm_polygons(fill = "HPI")
install.packages(tmap)
remotes::install_github("r-tmap/tmap")
tm_shape(World) +
tm_polygons(fill = "HPI")
library(tmap)
tm_shape(World) +
tm_polygons(fill = "HPI")
library(rnaturalearth)
# countries, UK undivided
plot(ne_countries(country = "austria", type = "countries"))
# countries, UK undivided
plot(ne_countries(country = "austria"))
plot(ne_countries(country = "austria", scale="medium"))
#austria
plot(ne_countries(country = "austria", scale="medium",category='adm0_dif'))
#austria
plot(ne_countries(country = "austria", scale="medium",type='adm0_dif'))
#austria
plot(ne_countries(country = "austria", scale="medium",type='countries'))
#austria
plot(ne_countries(country = "austria", scale="medium",type='countries'))
#austria
plot(ne_countries(country = "austria", scale="medium")["adm0_dif"])
#austria
plot(ne_countries(country = "austria", scale="high")["adm0_dif"])
austria -> ne_countries(country = "austria", scale="high")["adm0_dif"])
austria -> ne_countries(country = "austria", scale="high")["adm0_dif"]
austria  <- ne_countries(country = "austria", scale="high")["adm0_dif"]
austria  <- ne_countries(country = "austria", scale="medium")["adm0_dif"]
View(austria)
View(austria)
## get elevation data of austria
elev_austria <- get_elev_raster(austria,z=9, clip="locations")
library(elevatr) ##elevation data
## get elevation data of austria
elev_austria <- get_elev_raster(austria,z=9, clip="locations")
plot(elev_austria)
##Convert to matrix in order to plot
elev_austria_matrix <- raster_to_matrix(elev_austria)
library(rayshader)
##Convert to matrix in order to plot
elev_austria_matrix <- raster_to_matrix(elev_austria)
plot(elev_austria)
library(arulesViz)
library(sf)
library(terra)
library(tmap)
library(leafflat)
library(sf)
library(terra)
library(tmap)
library(rnaturalearth) ## get many
library(elevatr) ##elevation data
library(rayshader)
library(arulesViz)
plot(elev_austria)
tm_shape(austria) +
tm_raster(elev_austria_matrix)
#austria shapefile
austria  <- ne_countries(country = "austria", scale="medium")["adm0_dif"]
## get elevation data of austria
elev_austria <- get_elev_raster(austria,z=6, clip="locations")
View(elev_austria)
tm_shape(austria) +
tm_raster(elev_austria)
library(sf)
library(terra)
library(tmap)
library(rnaturalearth) ## get many
library(elevatr) ##elevation data
library(rayshader)
library(arulesViz)
library(starts)
library(stars)
##Convert to terra object
elev_austria_t <- terra(elev_austria)
##Convert to terra object
elev_austria_t <- rast(elev_austria)
## Prepare the plot
tm_shape(austria) +
tm_raster(elev_austria)
##Convert to STARs object to plot with tm_Shape
elev_austria_star <- read_stars(elev_austria_t)
austria_height = tm_shape(elev_austria_t) +
tm_raster(col = tm_vars(heat_colors(2)))
## Prepare the plot
austria_height = tm_shape(elev_austria_t) +
tm_raster(col = tm_vars(terrain.colors(2)))
print(austria_height)
## Prepare the plot
austria_height = tm_shape(elev_austria_t) +
tm_raster(col = terrain.colors(2))
print(austria_height)
## Prepare the plot
austria_height = tm_shape(elev_austria_t) +
tm_raster(col = terrain.colors(9))
print(austria_height)
## Prepare the plot
austria_height = tm_shape(elev_austria_t)
print(austria_height)
plot(elev_austria_t,
col = terrain.colors(25),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
add = TRUE)
plot(elev_austria_t,
col = terrain.colors(25),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = terrain.colors(2),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = heat.colors(25),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = heat.colors(25),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
##add = TRUE
)
# add contour lines
contour(elev, col = "grey40", add = TRUE)
plot(elev_austria_t,
col = heat.colors(25),
alpha = 0.5,
legend = FALSE,
axes = FALSE,
##add = TRUE
)
# add contour lines
contour(elev_austria_t, col = "grey40", add = TRUE)
library(RColorBrewer)
plot(elev_austria_t,
col = "GREYS",
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = "Greys",
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = "Greys",
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = Greys,
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
plot(elev_austria_t,
col = brewer.pal(n = 8, name = "Greys"),
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
# add contour lines
contour(elev_austria_t, col = "grey40", add = TRUE)
plot(elev_austria_t,
col = brewer.pal(n = 10, name = "Greys"),
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)
# add contour lines
contour(elev_austria_t, col = "grey40", add = TRUE)
plot(elev_austria_t,
col = brewer.pal(n = 10, name = "Greys"),
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)+
tm_borders()
plot(elev_austria_t,
col = brewer.pal(n = 9, name = "Greys"),
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)+
tm_borders()
tmap::tm_shape(elev_austria_t) +
tmap::tm_raster(
col = brewer.pal(n = 9, name = "Greys"),
col_alpha = 0.7
) +
tmap::tm_layout(
scale=1.0
)
plot(elev_austria_t,
col = brewer.pal(n = 9, name = "Greys"),
alpha = 0.8,
legend = TRUE,
axes = FALSE,
##add = TRUE
)+
tm_borders()
# add contour lines
contour(elev_austria_t, col = "grey40", add = TRUE)
tmap::tm_shape(elev_austria_t) +
tmap::tm_raster(
col = brewer.pal(n = 9, name = "Greys"),
col_alpha = 0.7
) +
tmap::tm_layout(
scale=1.0
)
tm_shape(elev_austria_t) + tm_raster(col.scale = tm_scale_discrete())
tm_shape(elev_austria_t) + tm_raster(
col = brewer.pal(n = 9, name = "Greys"),
col.scale = tm_scale_discrete()
)
plot(elev_austria_t)
View(elev_austria_t)
tm_shape(elev_austria_t)
elev_austria_t
#austria shapefile
austria  <- ne_countries(country = "austria", scale="medium")["adm0_dif"]
## get elevation data of austria
elev_austria <- get_elev_raster(austria,z=4, clip="locations")
##Convert to terra object
elev_austria_t <- rast(elev_austria)
elev_austria_t
tm_shape(elev_austria_t)
plot(elev_austria_t)
tm_shape(elev_austria_t)
library(tmaptools)
R.version
install.packages(installr)
install.packages("installr")
library(installr)
library(installr)
updateR()
install.packages("languageserver")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
geom_point() + geom_smooth() +
theme(legend.position = 'bottom')
ggplot(diamonds, aes(carat, price)) + geom_smooth() +
facet_grid(~ cut)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
knitr::kable(
mtcars[1:6, 1:6], caption = 'A subset of mtcars.'
)
p <- ggplot(mtcars2, aes(hp, mpg, color = am)) +
geom_point()
p
p + geom_smooth()
p
p + geom_smooth(method = 'lm')
knitr::kable(head(iris, 15))
p
knitr::kable(head(iris, 12))
p + geom_smooth(method = 'lm')
knitr::kable(head(iris, 5))
# a boxplot of weight vs transmission; this figure
# will be placed in the margin
ggplot(mtcars2, aes(am, wt)) + geom_boxplot() +
coord_flip()
# a figure in the main column
p <- ggplot(mtcars, aes(wt, hp)) + geom_point()
p
# a fullwidth figure
p + geom_smooth(method = 'lm') + facet_grid(~ gear)
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
install.packages(c("tufte", "rmarkdown"))
rmarkdown::render()
rmarkdown::render(skeleton.Rmd)
rmarkdown::render(skeleton.Rmd)
